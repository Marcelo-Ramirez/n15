generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ---------------------------
// TABLA ORIGINAL: USER
// ---------------------------
model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  name         String
  password     String
  createdAt    DateTime      @default(now()) @map("created_at")

  // 2FA
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?  

  // Relaciones originales
  movements    InventoryMovement[] @relation("MovementUser")
  orders       OrderClient[]

  // Relaciones nuevas de ventas
  saleOrders   SaleOrder[]
  saleProducts SaleProduct[]

  @@map("users")
}

// ---------------------------
// TABLA ORIGINAL: INGREDIENT
// ---------------------------
model Ingredient {
  id              Int           @id @default(autoincrement())
  name            String
  currentQuantity Float         @default(0) @map("current_quantity")
  unit            String
  reorderPoint    Float?       @map("reorder_point")
  pricePerUnit    Float        @map("price_per_unit")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  // Relaciones
  movements       InventoryMovement[]
  eoqModel        IngredientEOQ?

  @@map("ingredients")
}

// ---------------------------
// TABLA ORIGINAL: INVENTORY MOVEMENT
// ---------------------------
model InventoryMovement {
  id               Int       @id @default(autoincrement())
  ingredientId     Int       @map("ingredient_id")
  userId           Int       @map("user_id")
  movementType     String    @map("movement_type")
  reason           String
  quantity         Float
  previousQuantity Float     @map("previous_quantity")
  newQuantity      Float     @map("new_quantity")
  createdAt        DateTime  @default(now()) @map("created_at")

  // Relaciones
  ingredient       Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  user             User       @relation("MovementUser", fields: [userId], references: [id])
  
  @@map("inventory_movements")
}

// ---------------------------
// TABLA ORIGINAL: PRODUCT
// ---------------------------
model Product {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?
  costPerUnit     Float     @map("cost_per_unit")
  tipo            String
  sabor           String?
  currentQuantity Float     @default(0) @map("current_quantity")
  imagePath       String?   @map("image_path")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relaciones
  orders          OrderClient[]
  saleProducts    SaleProduct[]

  @@map("products")
}

// ---------------------------
// TABLA ORIGINAL: ORDER CLIENT
// ---------------------------
model OrderClient {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  productId  Int      @map("product_id")
  quantity   Int
  status     String   // 'pendiente', 'pagado', 'cancelado', etc.
  createdAt  DateTime @default(now()) @map("created_at")

  // Relaciones
  user       User       @relation(fields: [userId], references: [id])
  product    Product    @relation(fields: [productId], references: [id])
  saleOrders SaleOrder[]

  @@map("order_clients")
}

// ---------------------------
// NUEVO MODELO: EOQ POR INGREDIENTE
// ---------------------------
model IngredientEOQ {
  id                    Int        @id @default(autoincrement())
  ingredientId          Int        @unique @map("ingredient_id")
  orderingCost          Float
  annualMaintenanceCost Float
  leadTimeDays          Int
  reorderPoint          Int
  dailyDemand           Int
  annualDemand          Int
  updatedAt             DateTime   @updatedAt

  // Relaci√≥n 1 a 1 con Ingredient
  ingredient            Ingredient @relation(fields: [ingredientId], references: [id])

  @@map("ingredients_eoq_model")
}

// ---------------------------
// NUEVAS TABLAS DE VENTAS
// ---------------------------
model SaleOrder {
  id             Int          @id @default(autoincrement())
  userId         Int          @map("user_id")
  orderClientId  Int          @map("order_client_id")
  totalCostOrder Float
  createdAt      DateTime     @default(now())

  user       User         @relation(fields: [userId], references: [id])
  orderClient OrderClient @relation(fields: [orderClientId], references: [id])

  @@map("sale_orders")
}

model SaleProduct {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  productId  Int      @map("product_id")
  quantity   Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_products")
}
