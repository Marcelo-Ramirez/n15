// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  name      String
  password  String
  createdAt DateTime @default(now()) @map("created_at")

  // 2FA
  twoFactorEnabled   Boolean  @default(false)
  twoFactorSecret    String?  

  // Relaciones de inventario
  movements          InventoryMovement[] @relation("MovementUser")
  
  @@map("users")
}

model Ingredient {
  id              Int     @id @default(autoincrement())
  name            String
  currentQuantity Float   @default(0) @map("current_quantity")
  unit            String  // 'kg', 'unidades', 'litros'
  reorderPoint    Float?  @map("reorder_point") // Punto de reorden (opcional si no se ha calculado EOQ)
  pricePerUnit    Float   @map("price_per_unit")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  

  // Relaciones
  movements       InventoryMovement[]
  
  @@map("ingredients")
}

model InventoryMovement {
  id               Int     @id @default(autoincrement())
  ingredientId     Int     @map("ingredient_id")
  userId           Int     @map("user_id")
  movementType     String  @map("movement_type") // 'entrada', 'salida'
  reason           String  // 'compra', 'produccion', 'ajuste', 'vencimiento', 'da√±o'
  quantity         Float
  previousQuantity Float   @map("previous_quantity")
  newQuantity      Float   @map("new_quantity")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relaciones
  ingredient       Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  user             User       @relation("MovementUser", fields: [userId], references: [id])
  
  @@map("inventory_movements")
}
